/********************************************************************************************************
 * @file     zdo_stackUse.h
 *
 * @brief
 *
 * @author
 * @date     June. 10, 2017
 *
 * @par      Copyright (c) 2016, Telink Semiconductor (Shanghai) Co., Ltd.
 *           All rights reserved.
 *
 *			 The information contained herein is confidential and proprietary property of Telink
 * 		     Semiconductor (Shanghai) Co., Ltd. and is available under the terms
 *			 of Commercial License Agreement between Telink Semiconductor (Shanghai)
 *			 Co., Ltd. and the licensee in separate contract or the terms described here-in.
 *           This heading MUST NOT be removed from this file.
 *
 * 			 Licensees are granted free, non-transferable use of the information in this
 *			 file under Mutual Non-Disclosure Agreement. NO WARRENTY of ANY KIND is provided.
 *
 *******************************************************************************************************/
#pragma once

extern zdo_appIndCb_t *zdoAppIndCbLst;
extern zdo_touchLinkCb_t *zdoTouchLinkCb;



/*******************************************************************************
 * @brief	ED scan confirm interface which called by NWK layer to inform the ED scan results,
 	 	 	after receive this interface first check the APS layer ED scan request Flag, if flag rise,
 	 	 	it would construct a zdo_nwk_update_notify_resp packet using received message, and schedule a
 	 	 	task to send out the packet to the desired device

 * @param	param: ed scan results
 *
 * @return	none
 */
void zdo_nlme_ed_scan_confirm(void *param);

/*********************************************************************************************************
 * @brief	Implement NLME-LEAVE.confirm primitive, This primitive is generated by the NLME of a ZigBee coordinator
  			or ZigBee router and issued to its next higher layer on receipt of a broadcast leave command pertaining
 			to a device on its PAN. It is also generated by the NLME of a ZigBee router or end device and issued to
 			its next higher layer to indicate that it has been successfully removed from the network by its associated
 			router or ZigBee coordinator. Invoked by NWK layer.

 * @param	received LEAVE CMD packet
 *
 * @return	none
*/
void zdo_nlme_leave_indication_cb(void *arg);

/********************************************************************************************************
 * @brief	Called by NLME-LEAVE.confirm of the NWK layer
 */

void zdo_nlme_leave_confirm_cb(void *buff);



/**********************************************************************************************************
 * @brief	Call back function of the data poll request result. This function also implement the NWK timeout mechanism
			Once polling for indirect message requests is initiated, if
			communications failure with the parent is detected determined by failure of
			indirect message requests :Config_Parent_Link_Threshold_Retry consecutive
			attempts, the device application shall employ the network rejoin procedure.
 *
 * @param	param: packet of the poll request
 *
 * @return	none
 */
void zdo_nlme_sync_confirm(void *arg);

/************************************************************************************************************************
 * @brief	Interface used to schedule the parent synchronization function.If the device application sets the NLME-JOIN.RxOnWhenIdle
			parameter to FALSE, the :Config_NWK_indirectPollRate shall be used to determine the polling rate for indirect message requests.
			The :Config_NWK_indirectPollRate shall be set according to the value established by the application profile(s) supported on the device.
 *
 * @param	timeout: time in Superframe duration(15.638ms)
 *
 * @return	none
 */

void zdo_reschedule_syn_parent(u16 timeout);

void zdo_syn_parent_pause(void);

/*****************************************************************************************************
 * @brief	Interface called by NWK layer when a new device joined to the network
 *
 * @param	buf: packet address
 *
 * @return	none
 */

void zdo_nlme_join_indication(void *buf);



/************************************************************************************************************
 * @brief	Interface used to handle the direct join confirm call back
 *
 * @param	buf: packet address of the received info
 *
 * @return	none
 */
void zdo_nlme_direct_join_confirm(void *arg);

/************************************************************************************************************
 * @brief	Interface used to handle after receive associate response packet. If security enabled, this interface would
 * 			start authentication check mechanism. This interface also handle join failure states
 *
 * @param	buf: packet address of the received info
 *
 * @return	none
 */
void zdo_nlme_join_confirm(void *arg);


/**************************************************************************************************************
 * @brief	Permit join confirm call back interface which called by NWK layer after it executed the permit join
 * 			request CMD, the status of the processing result would be report to this interface. This interface should
 * 			decide according to the REQ source to decide whether or not notify the up layers
 * @param	Response status
 *
 * @retrun	none
 */
void zdo_permit_join_confirm(void *arg);




/***************************************************************************************************
 * @brief	Status indication call back function, which called by NWK layer to indicate link error,
 * 			PAN ID conflict, secure status
 * @param	buffer address of status
 *
 * @return	none
 */
void zdo_nlme_status_indication(void *arg);


/**************************************************************************************************
 * @brief	NWK discovery call back function, According to the scan result, this function should select
 * 			a network to join
 * @param	scan result
 *
 * @return	none
 */

void zdo_nlme_network_discovery_confirm_cb(void *arg);

void zdo_nlme_start_router_confirm(void *arg);

void zdo_reset_confirm_cb(void *p);


/******************************************************************************
 * @brief	Check if short address is available for given extended address and send
 * 			appropriate request if not.
 *
 * @param:	addr - extended address to check
 *
 * @return:	true - short address already available
 * 			false - short address currently is not available, request was sent
*/
bool zdo_discover_nwk_addr(const u64 *const addr);


/**************************************************************************************************************
 * @brief	The Device_annce is provided to enable ZigBee devices on the network to notify
			other ZigBee devices that the device has joined or re-joined the network,
			identifying the device¡¯s 64-bit IEEE address and new 16-bit NWK address, and
			informing the Remote Devices of the capability of the ZigBee device. This
			command shall be invoked for all ZigBee end devices upon join or rejoin. This
			command may also be invoked by ZigBee routers upon join or rejoin as part of
			NWK address conflict resolution. The destination addressing on this primitive is
			broadcast to all devices for which macRxOnWhenIdle = TRUE.
 * @param	req - zdo_match_descriptor_req_t request structure
 * 			zzr - zdo_zdp_req_t used for primitive transmit between layers
 *
 * @return	none
 */
void zdo_device_announce_send(void);

void zdo_parent_announce_send(void);

u8 af_handleGet();

u8 af_handleIs(void);


/******************************************************************************************
 * @brief	Call back function used when device act as coordinator role. During coordinator startup
 * 			procedure, after finished active scan and start a network it would generate network formation
 * 			call back to ZDO layer from NWK layer. After receive this message, zdo layer should enable the
 * 			security function.
 *
 * @param	param: buffer used for network formation
 *
 * @return	none
 */
void zdo_network_formation_confirm(void *arg);

zdo_status_t zdo_nlme_permit_join(u8 permitDuration);


void zdo_syncReq(void);

void zdo_set_pollRate(u32 newRate);

void af_nodeDescRxOnWhenIdleUpdate(bool enable);

void zdo_nlmeChannelShift(u8 ch);

void af_dataSendCnfCb(apsdeDataConf_t *pApsDataCnf);

u8 zdo_setApsChnMsk(u32 chp);

void aps_bindingTblSave2Flash(void *arg);

void zdo_nlmeForgetDev(tl_zb_normal_neighbor_entry_t *entry, addrExt_t nodeIeeeAddr, bool rejoin);

void zdo_clrStartUpFlag(void );
